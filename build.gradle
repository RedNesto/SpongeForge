// Gradle plugins
buildscript {
    repositories {
        mavenLocal()
        maven {
            name = 'gradle-plugins'
            url = 'https://plugins.gradle.org/m2'
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            name = 'forge1'
            url = 'http://files.minecraftforge.net/maven'
        }
//        maven {
//            name = 'forge'
//            url = 'https://files.minecraftforge.net/maven'
//        }
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:spongegradle:0.8.2-SNAPSHOT'
        classpath 'gradle.plugin.net.minecrell:licenser:0.4'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

// On Forge, we use the Forge build number as Minecraft version for ForgeGradle
ext.testmods = project.project('testmods')
ext.rootGroup = "net.minecraftforge"
ext.rootMinecraft = "forge"
ext.rootVersion = "$minecraftVersion-$forgeBuild"
ext.classifier = ""
ext.isClient = true

// Apply shared implementation Gradle config
apply from: project(':SpongeCommon').file('gradle/implementation.gradle')

version = "$minecraftVersion-$forgeBuild-$apiSuffix-$buildNumber"

dependencies {
}

minecraft {
    // todo - coremod handling from modlauncher is different
//    coreMod = 'org.spongepowered.mod.SpongeCoremod'
    // TODO - fingerprint signatures
//    replace '@expected_certificate_fingerprint@', project.hasProperty('spongeCertificateFingerprint') ? project.property('spongeCertificateFingerprint') : ''
}

sponge.plugin.meta {
    dependencies {
        forge {
            version = "$minecraftVersion-$forgeBuild"
        }
    }
}

dependencies {
    // TODO - re-enable when 1.13 is compiling
    //runtime testmods
}

compileJava {
    options.compilerArgs += [ "-Atokens=FORGE=$forgeBuild;FML=$forgeBuild" ]
}

if (project.hasProperty('spongeKeyStore')) {
//    task signShadowJar(type: SignJar, dependsOn: reobfJar) {
//        keyStore = project.spongeKeyStore
//        alias = project.spongeKeyStoreAlias
//        storePass = project.spongeKeyStorePass
//        keyPass = project.spongeKeyStoreKeyPass
//        inputFile = shadowJar.archivePath
//        outputFile = shadowJar.archivePath
//    }
//
//    signShadowJar.dependsOn shadowJar
//    build.dependsOn signShadowJar
}

jar {
    exclude 'log4j2.xml' // log4j2 configuration is for the development workspace only

    manifest {
        attributes(
                'Main-Class': 'org.spongepowered.launch.Main',
                'TargetForgeBuild': "$forgeBuild",
                'TargetForgeVersion': "$minecraftVersion-$forgeBuild-1.13-pre",
                'FMLCorePlugin': 'org.spongepowered.mod.SpongeCoremod',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0
        )
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task shadowDevJar(type: ShadowJar) {
    classifier = 'dev-shaded'

    from sourceSets.main.output
    from sourceSets.java6.output

    // Default settings for shadow tasks
    configurations = [project.configurations.runtime]
    manifest.inheritFrom tasks.jar.manifest
    exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

shadowDevJar shadowConfiguration

// Upload shadowDevJar to Maven repository
artifacts {
    archives shadowDevJar
}

allprojects {
    // Re-obfuscate only after creating the shadowDevJar

    // TODO - fix once we figure out how to reobf
//    tasks.findByName('reobfJar')?.mustRunAfter this.tasks.shadowDevJar
}

tasks.withType(ShadowJar) {
    exclude 'log4j2*.xml' // log4j2 configuration is for the development workspace only

    // Temporarily relocate and shade to avoid confict with forge. TODO: Remove when Forge updates to 1.3.0
    relocate('com.typesafe.config', 'configurate.typesafe.config')

    dependencies {
        // TODO - re-enable when 1.13 is compiling
        //exclude project(testmods.path)

        include dependency('com.typesafe:config')

        // This is not available on the client so we need to shade it
        include dependency('com.google.code.findbugs:jsr305')
    }
}

sourceSets.java6.runtimeClasspath += sourceSets.main.runtimeClasspath

// TODO - figure this part out.
//reobf {
//    jar {
//        extraFiles 'extraSrg.srg'
//    }
//}

apply from: 'changelog.gradle'
